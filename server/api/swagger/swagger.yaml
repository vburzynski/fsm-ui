swagger: "2.0"
info:
  version: "0.0.1"
  title: FSM UI API
# during dev, should point to your local machine
host: localhost:10010
basePath: /
schemes:
  - http
  - https
consumes:
  - application/vnd.api+json
produces:
  - application/vnd.api+json
x-swagger-mongoose:
  json-api: true
  key-conversion: camelcase
  schema-options:
    timestamps: true
paths:
  /hello:
    x-swagger-router-controller: hello-world
    get:
      description: Returns 'Hello' to the caller
      operationId: hello
      parameters:
        - name: name
          in: query
          description: The name of the person to whom to say hello
          required: false
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/hello-world"
        default:
          description: Error
          schema:
            $ref: "#/definitions/error-response"
  /swagger:
    x-swagger-pipe: swagger_raw
  /people:
    x-swagger-router-controller: person-controller
    get:
      operationId: getPeople
      summary: Gets all people
      description: Returns a list containing all people.
      responses:
        200:
          description: A list of people
          schema:
            type: object
            additionalProperties: false
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/people"
    post:
      operationId: createPerson
      summary: Creates a person
      description: Adds a new person to the people list.
      parameters:
        - name: person
          in: body
          description: The person data.
          required: true
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/people"
      responses:
        201:
          description: people succesfully created.
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/people"
        400:
          description: people could not be created.
  /people/{id}:
    x-swagger-router-controller: person-controller
    get:
      operationId: getPerson
      summary: Gets a person
      description: Returns a single person by identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: The person's id
          type: string
      responses:
        200:
          description: A Person
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/people"
        404:
          description: The person does not exist
  /edges:
    x-swagger-router-controller: edge-controller
    get:
      operationId: getEdges
      summary: Gets all edges
      description: Returns a list containing all edges.
      responses:
        200:
          description: A list of edges
          schema:
            type: object
            additionalProperties: false
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/edges"
    post:
      operationId: createEdge
      summary: Creates an edge
      description: Adds a new edge to the edge list.
      parameters:
        - in: body
          name: edge
          description: the edge data.
          required: true
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/edges"
      responses:
        201:
          description: Edge successfully created.
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/edges"
        400:
          description: Edge could not be created.
  /edges/{id}:
    x-swagger-router-controller: edge-controller
    get:
      operationId: getEdge
      summary: Gets an edge
      description: Returns a single edge by its identifier.
      parameters:
        - in: path
          name: id
          required: true
          description: the edge's id
          type: string
      responses:
        200:
          description: An edge
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/edges"
        404:
          description: The edge does not exist
    patch:
      operationId: updateEdge
      summary: Updates an edge
      description: Updates the edge with the matching id
      parameters:
        - in: path
          name: id
          required: true
          description: the edge's id
          type: string
        - in: body
          name: edge
          required: true
          description: the updated edge properties
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/edges"
      responses:
        200:
          description: Edge successfully updated
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/edges"
        404:
          description: Edge not found
    delete:
      operationId: deleteEdge
      summary: Deletes an edge
      description: Deletes the edge with the matching id
      parameters:
        - in: path
          name: id
          required: true
          description: the edge's id
          type: string
      responses:
        200:
          description: Edge deleted
        404:
          description: Edge not found
  /nodes:
    x-swagger-router-controller: node-controller
    get:
      operationId: getNodes
      summary: Gets all nodes
      description: Returns a list containin all nodes
      responses:
        200:
          description: A list of nodes
          schema:
            type: object
            additionalProperties: false
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/nodes"
    post:
      operationId: createNode
      summary: Creates a node
      description: Adds a new node to the node list.
      parameters:
        - in: body
          name: node
          description: the node data.
          required: true
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/nodes"
      responses:
        201:
          description: Node successfully created.
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/nodes"
        400:
          description: Node could not be created.
  /nodes/{id}:
    x-swagger-router-controller: node-controller
    get:
      operationId: getNode
      summary: Gets a node
      description: Returns a single node by its identifier.
      parameters:
        - in: path
          name: id
          required: true
          description: the node's id
          type: string
      responses:
        200:
          description: A node
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/nodes"
        404:
          description: The node does not exist
    patch:
      operationId: updateNode
      summary: Updates a node
      description: Updates the node with the given identifier
      parameters:
        - in: path
          name: id
          required: true
          description: the node's id
          type: string
        - in: body
          name: node
          required: true
          description: the updated parameters
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/nodes"
      responses:
        200:
          description: Node was successfully updated
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/nodes"
        404:
          description: node not found
    delete:
      operationId: deleteNode
      summary: Deletes a node
      description: Deletes the node with the given identifier
      parameters:
        - in: path
          name: id
          required: true
          description: the node's id
          type: string
      responses:
        200:
          description: Node deleted
        400:
          description: Invalide node id
definitions:
  people:
    type: object
    required:
      - type
      - attributes
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        required:
          - username
        properties:
          username:
            type: string
          firstName:
            type: string
          lastName:
            type: string
  edges-identifier:
    x-swagger-mongoose:
      exclude-schema: true
    type: object
    properties:
      id:
        type: string
      type:
        type: string
        x-swagger-mongoose:
          $ref: "#/definitions/edges"
  edges:
    type: object
    required:
      - type
      - attributes
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        properties:
          title:
            type: string
      relationships:
        type: object
        properties:
          source:
            type: object
            properties:
              data:
                $ref: "#/definitions/nodes-identifier"
          target:
            type: object
            properties:
              data:
                $ref: "#/definitions/nodes-identifier"
  nodes-identifier:
    x-swagger-mongoose:
      exclude-schema: true
    type: object
    properties:
      id:
        type: string
        x-swagger-mongoose:
          $ref: "#/definitions/nodes"
      type:
        type: string
  nodes:
    type: object
    required:
      - type
      - attributes
    properties:
      type:
        type: string
      id:
        type: string
      attributes:
        type: object
        required:
          - title
        properties:
          title:
            type: string
          events:
            type: array
            items:
              type: string
          position:
            type: array
            items:
              type: number
              format: float
              minItems: 2
              maxItems: 2
      relationships:
        type: object
        properties:
          outgoing:
            type: array
            items:
              $ref: "#/definitions/edges-identifier"
          incoming:
            type: array
            items:
              $ref: "#/definitions/edges-identifier"
  hello-world:
    x-swagger-mongoose:
      exclude-schema: true
    type: object
    required:
      - message
    properties:
      message:
        type: string
  error-response:
    x-swagger-mongoose:
      exclude-schema: true
    type: object
    required:
      - message
    properties:
      message:
        type: string
